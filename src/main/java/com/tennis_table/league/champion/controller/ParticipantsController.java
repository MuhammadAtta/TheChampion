package com.tennis_table.league.champion.controller;

import java.util.List;

import com.tennis_table.league.champion.model.Participant;
import com.tennis_table.league.champion.repository.IParticipantsRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.tennis_table.league.champion.service.IParticipantsService;

//@RestController
//@RequestMapping(path="/api/participants",produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)


@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /api (after Application path)

public class ParticipantsController {

	private Logger logger=LoggerFactory.getLogger(ParticipantsController.class);

	@Autowired
	private IParticipantsService participantsService;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private IParticipantsRepository participantRepository;

	/**
	 * Submit a participant request
	 * @param participant
	 * @return
	 */
	@PostMapping(path="create")
	public ResponseEntity<String> createParticipants(@RequestBody Participant participant)
	{
		logger.info("@method createParticipants");
		try {
			return ResponseEntity.ok(participantsService.createParticipants(participant));
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		} 
	}

	/**
	 * Get a list of all participants
	 * @return
	 */
	//@GetMapping
    @GetMapping(path="/participants")
	public ResponseEntity<List<Participant>> findAllParticipants()
	{
		logger.info("@method findAllParticipants");

		return ResponseEntity.ok(participantsService.findAllParticipants());
	}




	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody
	String addNewParticipant (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		logger.info("@method addNewParticipant");



		Participant n = new Participant();
		n.setName(name);
		n.setEmail(email);
		participantsService.createParticipants( n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Participant> getAllParticipant() {

		logger.info("@method getAllParticipant");


		// This returns a JSON or XML with the users
		return participantRepository.findAll();
	}
}
